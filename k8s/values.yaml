x-templates:
  ts-microservice-config: &ts-microservice-config
    port: 3000
    probe: graphql
  ts-microservice-env: &ts-microservice-env
    HOST: 0.0.0.0
    PORT: "3000"
    RABBIT_RMQ_URL: amqp://admin:admin@rabbit:5672
    RABBIT_HTTP_URL: http://admin:admin@rabbit:15672

microservices:
  auth:
    <<: *ts-microservice-config
    image: ghcr.io/kishieel/relegatio-auth:1.0.0
    development:
      enabled: true
      source: /volumes/microservices/auth
    setup:
      prisma.sh: |
        #!/usr/bin/env bash
        yarn prisma migrate deploy
        yarn prisma generate
    env:
      <<: *ts-microservice-env
      DATABASE_URL: mysql://root:root@mysql:3306/auth
      JWT_SECRET: secret

  gateway:
    <<: *ts-microservice-config
    image: ghcr.io/kishieel/relegatio-gateway:1.0.2
    development:
      enabled: true
      source: /volumes/microservices/gateway
    env:
      <<: *ts-microservice-env
      POSTS_GRAPHQL_URL: http://posts:3000/graphql
      AUTH_GRAPHQL_URL: http://auth:3000/graphql
    ingresses:
      gateway:
        enabled: true
        name: gateway
        hostname: api.relegatio.localhost
        path: /graphql
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /graphql

  notifications:
    <<: *ts-microservice-config
    image: ghcr.io/kishieel/relegatio-notifications:1.0.1
    development:
      enabled: true
      source: /volumes/microservices/notifications
    probe: rest
    env:
      <<: *ts-microservice-env
      DATABASE_URL:
        value: notifications

  posts:
    <<: *ts-microservice-config
    image: ghcr.io/kishieel/relegatio-posts:1.0.2
    development:
      enabled: true
      source: /volumes/microservices/posts
    env:
      <<: *ts-microservice-env
      DATABASE_URL: http://admin:admin@couchdb-svc-couchdb:5984

mysql:
  fullnameOverride: mysql
  auth:
    username: admin
    password: admin
    rootPassword: root
    defaultAuthenticationPlugin: caching_sha2_password
  initdbScripts:
    create-database.sql: |
      CREATE DATABASE IF NOT EXISTS auth;
      GRANT ALL PRIVILEGES ON auth.* TO 'admin'@'%';
  primary:
    persistence:
      enabled: true

redis:
  fullnameOverride: redis
  persistence:
    enabled: true

rabbitmq:
  fullnameOverride: rabbit
  auth:
    username: admin
    password: admin
  persistence:
    enabled: true
  ingress:
    enabled: true
    hostname: rabbit.relegatio.localhost
    ingressClassName: nginx

couchdb:
  fullnameOverride: couchdb
  adminUsername: admin
  adminPassword: admin
  clusterSize: 2
  enableSearch: true
  persistentVolume:
    enabled: true
  erlangFlags:
    setcookie: make-something-up
  autoSetup:
    enabled: true
    defaultDatabases:
      - _global_changes
      - _replicator
      - _users
  couchdbConfig:
    couchdb:
      uuid: 1298f2bb208f47a69f31a7d6afdd05f5
  ingress:
    enabled: true
    hosts:
      - couchdb.relegatio.localhost
    className: nginx

mailpit:
  fullnameOverride: mailpit
  ingress:
    enabled: true
    hostname: mailpit.relegatio.localhost
    ingressClassName: nginx

imagePullSecrets:
  - name: ghcr-secret

localUid: 1000
localGid: 1000

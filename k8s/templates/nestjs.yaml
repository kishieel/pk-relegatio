{{- range $serviceName, $serviceConfig := .Values.microservices }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    name: {{ $serviceName }}
spec:
  selector:
    matchLabels:
      name: {{ $serviceName }}
  template:
    metadata:
      labels:
        name: {{ $serviceName }}
    spec:
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- if ($serviceConfig.development).enabled }}
      securityContext:
        runAsUser: {{ $.Values.localUid }}
        runAsGroup: {{ $.Values.localGid }}
        fsGroup: {{ $.Values.localGid }}
      {{- end }}
      containers:
        - name: {{ $serviceName }}
          image: {{ $serviceConfig.image }}
          ports:
            - containerPort: {{ $serviceConfig.port }}
          imagePullPolicy: IfNotPresent
          env:
          {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
          {{- end }}
          {{- if ($serviceConfig.development).enabled }}
          volumeMounts:
            - mountPath: /app
              name: {{ $serviceName }}-code
          {{- end }}
          livenessProbe:
            httpGet:
              path: {{ if eq $serviceConfig.probe "graphql" }} /graphql?query=%7B__typename%7D {{ else }} /health {{ end }}
              port: {{ default 3000 $serviceConfig.port }}
              {{ if eq $serviceConfig.probe "graphql" }}
              httpHeaders:
                - name: apollo-require-preflight
                  value: "true"
              {{ end }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ if eq $serviceConfig.probe "graphql" }} /graphql?query=%7B__typename%7D {{ else }} /health {{ end }}
              port: {{ default 3000 $serviceConfig.port }}
              {{ if eq $serviceConfig.probe "graphql" }}
              httpHeaders:
                - name: apollo-require-preflight
                  value: "true"
              {{ end }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      {{- if ($serviceConfig.development).enabled }}
      volumes:
        - name: {{ $serviceName }}-code
          hostPath:
            path: {{ ($serviceConfig.development).source }}
            type: Directory
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
spec:
  selector:
    name: {{ $serviceName }}
  ports:
    - port: 3000
      targetPort: 3000
---
{{- range $ingressName, $ingressConfig := $serviceConfig.ingresses }}
{{- if $ingressConfig.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $ingressName }}
  annotations:
    {{- toYaml $ingressConfig.annotations | nindent 4 }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ $ingressConfig.hostname }}
      http:
        paths:
          - path: {{ $ingressConfig.path }}
            pathType: Prefix
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: {{ $serviceConfig.port }}
---
{{- end }}
{{- end }}
{{- if $serviceConfig.setup }}
{{- range $setupName, $setupConfig := $serviceConfig.setup }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}-configmap
data:
  {{ $setupName }}:
    {{- toYaml $setupConfig | indent 2 }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}
    spec:
      restartPolicy: Never
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- if ($serviceConfig.development).enabled }}
      securityContext:
        runAsUser: {{ $.Values.localUid }}
        runAsGroup: {{ $.Values.localGid }}
        fsGroup: {{ $.Values.localGid }}
      {{- end }}
      containers:
        - name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}
          image: {{ $serviceConfig.image }}
          imagePullPolicy: IfNotPresent
          env:
          {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
          {{- end }}
          command:
            - /bin/{{ $setupName }}
          volumeMounts:
            {{- if ($serviceConfig.development).enabled }}
            - mountPath: /app
              name: {{ $serviceName }}-code
            {{- end }}
            - name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}-configmap
              mountPath: /bin/{{ $setupName }}
              subPath: {{ $setupName }}
              readOnly: true
      volumes:
        {{- if ($serviceConfig.development).enabled }}
        - name: {{ $serviceName }}-code
          hostPath:
            path: {{ ($serviceConfig.development).source }}
            type: Directory
        {{- end }}
        - name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}-configmap
          configMap:
            name: {{ $serviceName }}-{{ $setupName | replace "." "-" }}-configmap
            defaultMode: 0777 # @todo: somehow I don't like this, check if I can set owner of this file to container user
  backoffLimit: 1
  ttlSecondsAfterFinished: 30
  activeDeadlineSeconds: 30
---
{{- end }}
{{- end }}
{{- end }}

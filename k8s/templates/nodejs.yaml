{{- range $serviceName, $serviceConfig := .Values.microservices }}
{{- if $serviceConfig.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    name: {{ $serviceName }}
spec:
  selector:
    matchLabels:
      name: {{ $serviceName }}
  template:
    metadata:
      labels:
        name: {{ $serviceName }}
    spec:
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- if ($serviceConfig.development).enabled }}
      securityContext:
        runAsUser: {{ $.Values.localUid }}
        runAsGroup: {{ $.Values.localGid }}
        fsGroup: {{ $.Values.localGid }}
      {{- end }}
      {{/* this change to running migration with init container instead of job */}}
      {{/* seems not to be started after claster upgrade */}}
      {{- if or ($serviceConfig.prisma).enabled ($serviceConfig.couchdb).enabled }}
      initContainers:
        {{- if ($serviceConfig.prisma).enabled }}
        - name: {{ $serviceName }}-prisma-migrate
          image: {{ $serviceConfig.image }}
          imagePullPolicy: IfNotPresent
          env:
            {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
            {{- end }}
          command: ["yarn", "prisma", "migrate", "deploy"]
          {{- if ($serviceConfig.development).enabled }}
          volumeMounts:
            - mountPath: /app
              name: {{ $serviceName }}-code
          {{- end }}
        {{- end }}
        {{- if ($serviceConfig.couchdb).enabled }}
        - name: {{ $serviceName }}-couchdb-migrate
          image: {{ $serviceConfig.image }}
          imagePullPolicy: IfNotPresent
          env:
            {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
            {{- end }}
          command: [ "yarn", "couchdb:migrate" ]
          {{- if ($serviceConfig.development).enabled }}
          volumeMounts:
            - mountPath: /app
              name: {{ $serviceName }}-code
          {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ $serviceName }}
          image: {{ $serviceConfig.image }}
          ports:
            - containerPort: {{ $serviceConfig.port }}
          imagePullPolicy: IfNotPresent
          env:
            {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
            {{- end }}
          resources:
            {{- if not $serviceConfig.development.enabled }}
            limits:
              cpu: 200m
              memory: 250Mi
            {{- end }}
            requests:
              cpu: 100m
              memory: 100Mi
          {{- if ($serviceConfig.development).enabled }}
          volumeMounts:
            - mountPath: /app
              name: {{ $serviceName }}-code
          {{- end }}
          {{- if $serviceConfig.probe }}
          livenessProbe:
            httpGet:
              path: {{ default "/" $serviceConfig.probe.path  }}
              port: {{ default 3000 $serviceConfig.probe.port }}
              httpHeaders:
                - name: apollo-require-preflight
                  value: "true"
            initialDelaySeconds: {{ ternary 300 30 $serviceConfig.development.enabled }}
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: {{ default "/" $serviceConfig.probe.path  }}
              port: {{ default 3000 $serviceConfig.probe.port }}
              httpHeaders:
                - name: apollo-require-preflight
                  value: "true"
            initialDelaySeconds: {{ ternary 300 30 $serviceConfig.development.enabled }}
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          {{- end }}
      {{- if ($serviceConfig.development).enabled }}
      volumes:
        - name: {{ $serviceName }}-code
          hostPath:
            path: {{ ($serviceConfig.development).source }}
            type: Directory
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
spec:
  selector:
    name: {{ $serviceName }}
  ports:
    - port: 3000
      targetPort: 3000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ $serviceName }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $serviceName }}
  minReplicas: 1
  maxReplicas: 2
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
{{- range $ingressName, $ingressConfig := $serviceConfig.ingresses }}
{{- if $ingressConfig.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $ingressName }}
  annotations:
    {{- toYaml $ingressConfig.annotations | nindent 4 }}
spec:
  ingressClassName: nginx
  rules:
    - host: {{ $ingressConfig.hostname }}
      http:
        paths:
          - path: {{ $ingressConfig.path }}
            pathType: Prefix
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: {{ $serviceConfig.port }}
  {{- if $ingressConfig.tls.enabled }}
  tls:
    - secretName: {{ $ingressConfig.tls.secretName }}
  {{- end }}
---
{{- end }}
{{- end }}
{{- if ($serviceConfig.prisma).enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $serviceName }}-prisma-migrate
  annotations:
    "helm.sh/hook": "post-upgrade"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ $serviceName }}-prisma-migrate
    spec:
      restartPolicy: Never
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- if ($serviceConfig.development).enabled }}
      securityContext:
        runAsUser: {{ $.Values.localUid }}
        runAsGroup: {{ $.Values.localGid }}
        fsGroup: {{ $.Values.localGid }}
      {{- end }}
      containers:
        - name: {{ $serviceName }}-prisma-migrate
          image: {{ $serviceConfig.image }}
          imagePullPolicy: IfNotPresent
          env:
          {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
          {{- end }}
          command: ["yarn", "prisma", "migrate", "deploy"]
          volumeMounts:
            {{- if ($serviceConfig.development).enabled }}
            - mountPath: /app
              name: {{ $serviceName }}-code
            {{- end }}
      volumes:
        {{- if ($serviceConfig.development).enabled }}
        - name: {{ $serviceName }}-code
          hostPath:
            path: {{ ($serviceConfig.development).source }}
            type: Directory
        {{- end }}
  backoffLimit: 1
  ttlSecondsAfterFinished: 30
  activeDeadlineSeconds: 30
---
{{- end }}
{{- if ($serviceConfig.couchdb).enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $serviceName }}-couchdb-migrate
  annotations:
    "helm.sh/hook": "post-upgrade"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ $serviceName }}-couchdb-migrate
    spec:
      restartPolicy: Never
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      {{- if ($serviceConfig.development).enabled }}
      securityContext:
        runAsUser: {{ $.Values.localUid }}
        runAsGroup: {{ $.Values.localGid }}
        fsGroup: {{ $.Values.localGid }}
      {{- end }}
      containers:
        - name: {{ $serviceName }}-couchdb-migrate
          image: {{ $serviceConfig.image }}
          imagePullPolicy: IfNotPresent
          env:
          {{- range $envName, $envValue := $serviceConfig.env }}
            - name: {{ $envName }}
              value: "{{ $envValue }}"
          {{- end }}
          command: ["yarn", "couchdb:migrate"]
          volumeMounts:
            {{- if ($serviceConfig.development).enabled }}
            - mountPath: /app
              name: {{ $serviceName }}-code
            {{- end }}
      volumes:
        {{- if ($serviceConfig.development).enabled }}
        - name: {{ $serviceName }}-code
          hostPath:
            path: {{ ($serviceConfig.development).source }}
            type: Directory
        {{- end }}
  backoffLimit: 1
  ttlSecondsAfterFinished: 30
  activeDeadlineSeconds: 30
---
{{- end }}
{{- end }}
{{- end }}
